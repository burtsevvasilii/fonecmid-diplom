#Область ОбработчикиСобытий
Процедура ОбработкаПроведения(Отказ,Режим)
	
	// регистр ВКМ_ВыполненныеКлиентуРаботы
	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоговорыКонтрагентов.ВидДоговора,
	|	ДоговорыКонтрагентов.ВКМ_НачалоДействияДоговора,
	|	ДоговорыКонтрагентов.ВКМ_КонецДействияДоговора,
	|	ДоговорыКонтрагентов.ВКМ_СтоимостьЧасаРаботы
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Договор
	|	И &Дата МЕЖДУ ДоговорыКонтрагентов.ВКМ_НачалоДействияДоговора И ДоговорыКонтрагентов.ВКМ_КонецДействияДоговора";
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Дата", Дата);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Дата документа не соответствует периоду действия договора.";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл	
		Если Выборка.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Вид договора с клиентом не является абонентским облуживанием";
			Сообщение.Сообщить();
			Отказ = Истина; 
		Иначе
			Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
			Движение.Период = Дата;
			Движение.Клиент = Клиент;
			Движение.Договор = Договор;
			Движение.КоличествоЧасов = ВыполненныеРаботы.Итог("ЧасыКОплатеКлиенту");
			Движение.СуммаКОплате = Движение.КоличествоЧасов * Выборка.ВКМ_СтоимостьЧасаРаботы;
		КонецЕсли;
	КонецЦикла;
	
	//Регистр ВКМ_ВыполненныеСотрудникомРаботы
	
	Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записывать = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВКМ_ОбслуживаниеКлиента.Договор.ВКМ_СтоимостьЧасаРаботы,
	|	ВКМ_ОбслуживаниеКлиента.Специалист,
	|	ВКМ_ОбслуживаниеКлиента.Ссылка
	|ПОМЕСТИТЬ ВТ_СтавкаЧаса
	|ИЗ
	|	Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента
	|ГДЕ
	|	ВКМ_ОбслуживаниеКлиента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.ЧасыКОплатеКлиенту,
	|	ВТ_СтавкаЧаса.ДоговорВКМ_СтоимостьЧасаРаботы,
	|	ВТ_СтавкаЧаса.Специалист
	|ПОМЕСТИТЬ ВТ_СотрудникСтавка
	|ИЗ
	|	Документ.ВКМ_ОбслуживаниеКлиента.ВыполненныеРаботы КАК ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтавкаЧаса КАК ВТ_СтавкаЧаса
	|		ПО ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка = ВТ_СтавкаЧаса.Ссылка
	|ГДЕ
	|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.ПроцентОтРабот КАК ПроцентОтРабот,
	|	СУММА(ВТ_СотрудникСтавка.ЧасыКОплатеКлиенту) КАК ЧасыКОплатеКлиенту,
	|	ВТ_СотрудникСтавка.ДоговорВКМ_СтоимостьЧасаРаботы КАК СтоимостьЧасаРаботы,
	|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.Сотрудник
	|ИЗ
	|	ВТ_СотрудникСтавка КАК ВТ_СотрудникСтавка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(&Период,) КАК
	|			ВКМ_УсловияОплатыСотрудниковСрезПоследних
	|		ПО ВТ_СотрудникСтавка.Специалист = ВКМ_УсловияОплатыСотрудниковСрезПоследних.Сотрудник
	|СГРУППИРОВАТЬ ПО
	|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.ПроцентОтРабот,
	|	ВТ_СотрудникСтавка.ДоговорВКМ_СтоимостьЧасаРаботы,
	|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.Сотрудник";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Период", Дата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.ПроцентОтРабот) Тогда
			ТекстСообщения = СтрШаблон("Сотруднику %1 не задан процент от работ", Выборка.Сотрудник);
			//@skip-check undefined-variable
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
		Иначе
			Движение = Движения.ВКМ_ВыполненныеСотрудникомРаботы.Добавить();
			Движение.Период = Дата;
			Движение.Сотрудник = Выборка.Сотрудник;
			Движение.ЧасовКОплате = Выборка.ЧасыКОплатеКлиенту;
			Движение.СуммаКОплате = Выборка.ЧасыКОплатеКлиенту * Выборка.СтоимостьЧасаРаботы * Число(Выборка.ПроцентОтРабот) / 100;
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
			
	Если ДополнительныеСвойства.Данные = Неопределено Тогда
		СправочникОбъект = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
		Текст = СтрШаблон("Новая заявка №%1: Дата проведения работы %2; Клиент %3; Специалист %4; Проблема %5.",
		                  Номер, ДатаПроведенияРабот, Строка(Клиент), Строка(Специалист), ОписаниеПроблемы);
		СправочникОбъект.ТекстСообщения = Текст;
		СправочникОбъект.Записать(); 
	Иначе 
		Для Каждого Элемент Из ДополнительныеСвойства.Данные Цикл
			Если Элемент.ДатаПроведенияРабот <> ДатаПроведенияРабот Или Элемент.Специалист <> Специалист 
				Или Элемент.ВремяНачалаРаботПлан <> ВремяНачалаРаботПлан 
				Или Элемент.ВремяОкончанияРаботПлан <> ВремяОкончанияРаботПлан Тогда
				СправочникОбъект = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
				Текст = СтрШаблон("Измененная заявка №%1: Новая дата проведения работы %2; Клиент %3; Новый специалист %4; Проблема %5.",
				                  Номер, ДатаПроведенияРабот, Строка(Клиент), Строка(Специалист), ОписаниеПроблемы);
				СправочникОбъект.ТекстСообщения = Текст;
				СправочникОбъект.Записать(); 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры 

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)	
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВКМ_ОбслуживаниеКлиента.Ссылка КАК Ссылка,
	|	ВКМ_ОбслуживаниеКлиента.Номер КАК Номер,
	|	ВКМ_ОбслуживаниеКлиента.ДатаПроведенияРабот КАК ДатаПроведенияРабот,
	|	ВКМ_ОбслуживаниеКлиента.ОписаниеПроблемы КАК ОписаниеПроблемы,
	|	ВКМ_ОбслуживаниеКлиента.ВремяНачалаРаботПлан КАК ВремяНачалаРаботПлан,
	|	ВКМ_ОбслуживаниеКлиента.ВремяОкончанияРаботПлан КАК ВремяОкончанияРаботПлан,
	|	ВКМ_ОбслуживаниеКлиента.Клиент.Наименование КАК Клиент,
	|	ВКМ_ОбслуживаниеКлиента.Специалист.Наименование КАК Специалист
	|ИЗ
	|	Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента
	|ГДЕ
	|	ВКМ_ОбслуживаниеКлиента.Ссылка = &Ссылка"; 
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ДополнительныеСвойства.Вставить("Данные", Неопределено);
	Иначе
		Данные = Результат.Выгрузить();
		ДополнительныеСвойства.Вставить("Данные", Данные);
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти